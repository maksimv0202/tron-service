services:
  nginx:
    image: nginx:stable
    container_name: nginx
    hostname: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    restart: unless-stopped
    depends_on:
      - api
    networks:
      - main
    healthcheck:
      test: ["CMD", "service", "nginx", "status"]
      timeout: 10s
  api:
    container_name: api
    hostname: api
    build:
      context: .
      dockerfile: Dockerfile
    restart: on-failure
    networks:
      - main
    depends_on:
      postgres:
        condition: service_healthy
  postgres:
    image: postgres:16-alpine
    container_name: postgres
    hostname: postgres
    restart: unless-stopped
    networks:
      - main
    expose:
      - 5432
    volumes:
      - postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d postgres -U postgres"]
      interval: 5s
      timeout: 10s
      retries: 5
    environment:
      - POSTGRES_USERNAME=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
volumes:
  postgres:
networks:
  main:
    driver: bridge